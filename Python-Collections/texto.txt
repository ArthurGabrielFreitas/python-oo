Transcrição da aula 05 do curso de Collections parte 2.

[00:00] Por fim, vamos colocar tudo isso em prática para vermos algum exemplo diferente? Então o que eu queria fazer agora não é um contador de palavras, eu fazer um contador de letras para vermos uma coisa interessante que acontece na língua portuguesa e em outras línguas, para ser sincero, também. Então eu vou criar aqui uma nova sessão que é "#Testando o uso de diversas coleções".

[00:23] Então o que vamos fazer é o seguinte: vamos pegar dois textos, por exemplo eu posso entrar no blog da Alura e pegar textos do blog da Alura. Eu posso pegar um texto que está falando sobre expressões regulares e posso pegar um outro texto de outro assunto, só para não termos dois assuntos similares. Vou pegar um o outro assunto, temos um de programação e um aqui que é de negócios: B2C, B2B, coisas do gênero. Então dois assuntos distintos, um de programação e um não de programação.

[00:53] Então dois assuntos, dois textos. Vamos separar esses dois textos? Então vou copiar uma parte desse texto aqui, vou copiar três parágrafos. Vou copiar uns três parágrafos iniciais, então texto1 = então três aspas e três aspas para poder ter várias linhas, então no Python várias linhas, três parágrafos. Repara, eu não vou copiar o código, eu não quero o código, eu quero o texto em português, então vou copiar essas outras aqui, quatro parágrafos, que também é texto em português.

[01:23] Então eu quero copiar o texto em português sobre programação e mais um pouco aqui, copiar tudo isso. Então eu tenho um texto, que é um texto razoável, posso rodar, é um texto sobre programação e vou colocar um texto2 também, três aspas, Enter. E agora um texto sobre B2C, B2B, e por aí vai. Então vou pegar esse texto aqui, e olha, tem bastante texto, tem bastante texto mesmo. Não é programação, então vou copiar esse texto inteiro, porque não falou de programação. Copiei.

[02:00] Então dois textos de assuntos totalmente diferentes: vendas, negócio, B2B, B2C; programação, expressão regular, e por aí vai, no caso era até com Java Script e HTML, se não me engano. Então vamos lá. Então eu tenho dois textos que eu queria fazer agora era contar as letras. Será que eu consigo contar as letras de um texto? Então vamos parar para pensar: se eu fizer um for palavra in texto1.split( ):. Quando eu faço o texto1.split( ), o que é o texto1.split( ) mesmo? Ele quebra o texto em palavras.

[02:35] Mas quando tem uma palavra, por exemplo "guilherme", e eu fizer um for x in "guilherme":, cada um dos elementos x é o que? É uma das letras. Então em um texto, você pode considerar, entre aspas, que uma string é como se funcionasse como uma lista ou um iterável de caracteres. Um texto string no Python é um iterável de caracteres, você pode pensar dessa maneira. E já que isso é verdade, aqui da maneira que eu estou trabalhando, então eu poderia criar um contador em cima do texto1.

Counter(texto1)

[03:10] Vamos criar um contador em cima do texto1? Olha aqui: quantas vezes cada letra "A"pareceu. Maiúsculo e minúsculo, então texto1.lower(). Então quantas vezes cada letra "A"pareceu, em minúsculo, já no minúsculo. Então as aparições estão aí. Agora eu tenho a contagem de cada letra, eu queria saber o quão frequente apareceu a letra "A", o caractere "A", o quão frequente apareceu o caractere "E", o quão frequente apareceu o caractere hífen, o caractere quebra de linha. O caractere quebra de linha eu não estou interessado pessoalmente, mas vamos fazer para todos, vamos trabalhar para todos de uma maneira uniforme.

[03:51] E quando eu digo quão frequente, eu não quero dizer a frequência exata, quantas vezes. Quantas vezes já está aqui: 175, 158, tudo bem, isso daqui eu já tenho, as aparições. As aparições eu já tenho, o que eu quero agora é dado as aparições eu quero saber se, por exemplo, o total de aparições. Um total de aparições é o que: aparições, todos os valores – values( ) - todos os valores, cadê todos os valores? Todos os valores, soma tudo isso, eu queria somar tudo isso.

[04:26] Então eu poderia tentar somar todos esses valores com sum(). Então isso aqui é o número de aparições de caracteres que apareceram no meu texto. Estou usando essa maneira para calcular o total de caracteres. Então esse é o total de caracteres e esse aqui é um dicionário com as aparições. Agora para cada uma das letras, para cada uma for letra in aparicoes:, o que eu quero fazer?

[04:53] Eu quero pegar a letra, por exemplo a letra "A", e falar: a letra "A" apareceu 182 vezes. Se ela apareceu 182 de 1821, isso significa 10%, que é 0.1. 10% das aparições nesse texto1 são da letra "A", é isso que está mostrando para nós. Então é isso que eu quero fazer, quero pegar aqui a letra "A", que eu tenho, mas eu quero saber quantas vezes que apareceu, isso é: o aparições eu não estou interessado só na chave, estou interessado também nos valores .items(), já tínhamos visto isso.

[05:31] Então para cada letra "E" aparições daquela letra, que eu vou chamar de frequência, que aquela letra "A" pareceu. Para cada um desses, o que eu vou calcular? Então para cada um desses, eu vou calcular frequencia dividido pelo total de caracteres, e isso vai me devolver o que? 132, por exemplo, dividido por 1821 que é 0.1. Mas vamos colocar isso aqui em uma tupla, vamos colocar em uma tupla: essa letra teve essa frequência, com/total. Essa outra letra, essa outra frequência.

[06:12] Então essa daqui é a nossa tupla. Vou deixar essa tupla e vamos imprimir ela, só para vermos que está funcionando, queremos ver que está funcionando. Então a letra "A" apareceu 009, 9% das vezes. A letra "R" apareceu 6%. O caractere "espaço" apareceu 16%. O caractere "E" apareceu 8%, e por aí vai, tudo bem? Então aqui estão as frequências de cada letra no texto1. O que eu queria agora, na verdade, era analisar só algumas letras, não quero analisar necessariamente todas as letras. Só algumas, eu já estou feliz.

[06:52] Só que você fala assim: "Gui, quais são as que você quer dar uma olhada?" Eu quero dar uma olhada nas dez mais frequentes. Então quer dizer, as 10 cujo valor é o mais frequente de todos, você fala: "você vai querer pegar os valores de tudo isso aqui, de todas as tuplas". Todas essas tuplas eu vou querer jogar em alguma coisa - jogar em alguma coisa todas elas. Então eu posso jogar, por exemplo, em uma listinha, fazer uma lista com todas elas.

[07:20] Então eu posso fazer uma lista. Como é que eu faço para criar uma lista de todas essas tuplas? Lembra do list comprehension? Então eu posso pegar isso aqui, que é a minha tupla, jogo aqui no meu for, e agora eu tenho uma lista. Agora eu tenho uma lista, isto é, para cada letra "E" frequência, eu crio a tupla e jogo tudo isso em uma lista. Então poderia ser assim. Está lá, cada uma delas está calculada. Então eu tenho cada uma delas já em uma lista, só que agora eu queria ordenar pelo lado direito.

[07:55] E calma aí, isso aqui está muito parecido com um dicionário. Vamos criar um dicionário em cima disso. Então dicionário em cima disso, então essas daqui são todas as aparições proporcionais, certo? Essas daqui são as proporções, mas na verdade eu vou pôr proporcoes, eu vou criar um dicionário em cima das proporções. Faltou imprimir, se eu não imprimir, não tem graça. Proporções. Quando imprimimos esse dicionário ele, imprime ordenado, mas não pela frequência, ele está imprimindo ordenado pela chave e não pelo valor, então não nos interessa muito.

[08:29] Mas calma aí, quando estávamos trabalhando com contador, o contador sabe que o lado esquerdo é uma chave e que o lado direito é um valor: quanto maior, mais vezes apareceu. Então vamos dar uma olhada na documentação do contador? Olha o contador. O contador recebe um iterável ou um mapping, um dicionário, tudo bem, o próprio dicionário, ele até dá o exemplo aqui. E o contador tem algumas coisas interessantes, por exemplo, o mais comum, conseguimos pegar os mais comuns.

[09:00] Então o que eu vou fazer? Vou pegar esse meu dicionário, na verdade vou criar um contador em cima dele, está aí um contador. E agora eu vou querer saber os mais comum – most_common() - 10 mais comuns. Então os 10 mais comuns são o espaço, afinal nós temos espaço entre todas as palavras; depois o "A", o "O", o "E", o "R", o "S", o "N", o "C", o "U", e por aí vai. Essa é a frequência. Então eu defini uma função para isso daqui: analisa_frequencia_de_letras( ) nesse texto.

[09:40] Então vou definir uma função, aqui eu vou tirar de texto1, vou colocar só texto, e vamos imprimir esse most_commom(), mas repare, ele está devolvendo aqui várias tuplas, então eu já vou fazer um for. Aqui é o caractere, ao invés de ser letra, que é o mais correto - caractere - e aqui a proporcao. Para cada caractere, proporção dentro dos mais comuns, então aqui eu vou extrair para mais_comuns. Então, para dentro de cada um desses, eu vou imprimir o caractere, uma setinha, estou fazendo um print() com vários parâmetros, e uma proporção.

[10:18] Agora eu tenho os espaços 0.16, e etc. Mas tem algumas coisinhas para melhorar: esse número aqui está entre 0 e 1, eu vou querer mostrar em porcentagem, que fica mais claro. Então eu vou formatar agora bonito, vou colocar o caractere, vou colocar a setinha e vou colocar o número aqui com um símbolo de por cento.

[10:49] Vamos formatar então com caractere e com a proporção, mas já vezes 100, para que fique em porcentagem. Vai ficar em porcentagem agora, vamos ver mais bonito: 16%, 9%, etc. Lembrando que aqui podemos utilizar formatação de dois dígitos decimais, para ficar mais bonitinho. Então 16 - opa, coloquei aqui .d como se fosse um número inteiro, mas é um ponto flutuante, é f, de flutuante, e agora sim, 16.14, 9.61, e por aí vai.

[11:21] Agora vamos analisar a frequência de letras do texto2? Do texto2. Analisamos e curiosamente a taxa de espaços em branco é 16.28. Depois, o caractere que mais aparece é a letra "A", com 9.85, depois a letra "E" e a letra "O". Aqui era a letra "O" e a letra "E", muito perto. Depois “S” e “R”, aqui “R” e “S”. Depois ele “M” e “N”, aqui é o “M”, depois o “T”, o “I”, aqui mudou um pouco, tudo bem? Mas as mais comuns estão ali muito próximas, muito próximas mesmo. E o que acontece é que em uma língua, por exemplo, na língua portuguesa, a frequência de aparição das letras costuma seguir uma distribuição, que é uma distribuição próxima dessas distribuições que estamos vendo.

[12:11] Então quanto maior o texto, mais próximo vai ficar certas porcentagens, independente se o assunto é programação em Regex, ou se o assunto é vendas, ou se o assunto é seja lá o que for, em português. E a mesma coisa acontece com outras línguas, se você utilizar o inglês, você vai ver que a frequência de caracteres é diferente da língua portuguesa, mas ocorre sempre em uma certa frequência. Então é curioso, e com isso, é um exemplo legal, que utilizamos tudo que vimos.

[12:40] Utilizamos lista aqui, ou quase tudo, de alguma maneira. Utilizamos lista aqui, iteração em cima lista, list comprehension, dicionário, contador, e laços em cima disso, e impressão, e cálculos em cima disso, várias coisas do gênero. Inclusive no final, vimos que até a API de Counter, ela é mais do que uma pura contadora, ela traz funções para trabalharmos em cima da contagem, como por exemplo, os mais comuns.

[13:07] Então tem um monte de coisa legal para fazermos e de quebra vemos uma coisa aqui da distribuição das frequências das letras na língua portuguesa, que é um toque interessante utilizado para questões básicas de criptografia, de criptografias básicas e chaves de criptografia muito básicas que são razoavelmente tranquilas de quebrar. Então uma curiosidade para vocês. Então com isso vimos como utilizar diversas coleções e no mundo real, aí afora, você vai utilizar diversas delas a medida do possível e do necessário. Não tenha medo de consultar documentação, de procurar um uso de cada uma delas.
Discutir no Fórum.